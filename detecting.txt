#include <exception>
#include <fstream>
#include <iostream>
#include <opencv/cv.h>
#include <opencv2/calib3d.hpp>
#include <opencv2/core.hpp>
#include "opencv2/highgui.hpp"
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/objdetect/objdetect.hpp"
#include "opencv2/opencv.hpp"
#include <pylon/PylonIncludes.h>
#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <string>



using namespace std;
using namespace cv;
int main(int argc, char *argv[])
{
    {
        int myExposure = 30000;
        
        // The exit code of the sample application.
        int exitCode = 0;
        
        // Automagically call PylonInitialize and PylonTerminate to ensure the pylon runtime system
        // is initialized during the lifetime of this object.
        Pylon::PylonAutoInitTerm autoInitTerm;
        
        try
        {
            // Create an instant camera object with the camera device found first.
            Pylon::CInstantCamera camera( Pylon::CTlFactory::GetInstance().CreateFirstDevice());
            
            // Get a camera nodemap in order to access camera parameters.
            GenApi::INodeMap& nodemap= camera.GetNodeMap();
            
            // Open the camera before accessing any parameters.
            camera.Open();
            // Create pointers to access the camera Width and Height parameters.
            GenApi::CIntegerPtr width= nodemap.GetNode("Width");
            GenApi::CIntegerPtr height= nodemap.GetNode("Height");
            
            // The parameter MaxNumBuffer can be used to control the count of buffers
            // allocated for grabbing. The default value of this parameter is 10.
            //camera.MaxNumBuffer = 5;
            
            // Create a pylon ImageFormatConverter object.
            Pylon::CImageFormatConverter formatConverter;
            // Specify the output pixel format.
            formatConverter.OutputPixelFormat= Pylon::PixelType_BGR8packed;
            // Create a PylonImage that will be used to create OpenCV images later.
            Pylon::CPylonImage pylonImage;
            
            // Create an OpenCV image.
            cv::Mat openCvImage;
            
            
            // Set exposure to manual
            GenApi::CEnumerationPtr exposureAuto( nodemap.GetNode( "ExposureAuto"));
            if ( GenApi::IsWritable( exposureAuto)){
                exposureAuto->FromString("Off");
                std::cout << "Exposure auto disabled." << std::endl;
            }
            
            // Set custom exposure
            GenApi::CFloatPtr exposureTime = nodemap.GetNode("ExposureTime");
            std::cout << "Old exposure: " << exposureTime->GetValue() << std::endl;
            if(exposureTime.IsValid()) {
                if(myExposure >= exposureTime->GetMin() && myExposure <= exposureTime->GetMax()) {
                    exposureTime->SetValue(myExposure);
                }else {
                    exposureTime->SetValue(exposureTime->GetMin());
                    std::cout << ">> Exposure has been set with the minimum available value." << std::endl;
                    std::cout << ">> The available exposure range is [" << exposureTime->GetMin() << " - " << exposureTime->GetMax() << "] (us)" << std::endl;
                }
            }else {
                
                std::cout << ">> Failed to set exposure value." << std::endl;
                return false;
            }
            std::cout << "New exposure: " << exposureTime->GetValue() << std::endl;
            
            // Start the grabbing of c_countOfImagesToGrab images.
            // The camera device is parameterized with a default configuration which
            // sets up free-running continuous acquisition.
            camera.StartGrabbing(Pylon::GrabStrategy_LatestImageOnly);
            
            // This smart pointer will receive the grab result data.
            Pylon::CGrabResultPtr ptrGrabResult;
            
            // image grabbing loop
            int frame = 1;
            while ( camera.IsGrabbing())
            {
                // Wait for an image and then retrieve it. A timeout of 5000 ms is used.
                camera.RetrieveResult( 5000, ptrGrabResult, Pylon::TimeoutHandling_ThrowException);
                
                // Image grabbed successfully?
                if (ptrGrabResult->GrabSucceeded())
                {
                    // Access the image data.
                    //cout << "SizeX: " << ptrGrabResult->GetWidth() << endl;
                    //cout << "SizeY: " << ptrGrabResult->GetHeight() << endl;
                    
                    // Convert the grabbed buffer to a pylon image.
                    formatConverter.Convert(pylonImage, ptrGrabResult);

                    // Create an OpenCV image from a pylon image.
                    openCvImage= cv::Mat(ptrGrabResult->GetHeight(), ptrGrabResult->GetWidth(), CV_8UC3, (uint8_t *) pylonImage.GetBuffer());


                    //////////////////////////////////////////////////////
                    //////////// Here your code begins ///////////////////
                    //////////////////////////////////////////////////////

                    /// Detect and show objects and targets
                    {
                        Mat gray;
                        cvtColor(openCvImage, gray, COLOR_BGR2GRAY);
                        medianBlur(gray, gray, 5);
                        vector<Vec3f> circles;
                        HoughCircles(gray, circles, HOUGH_GRADIENT, 1,
                                     gray.rows/16,  // change this value to detect circles with different distances to each other
                                     100, 30, 20, 30 // change the last two parameter // (min_radius & max_radius) to detect larger circles
                                     );
                        for( size_t i = 0; i < circles.size(); i++ )
                        {
                            Vec3i c = circles[i];
                            Point center = Point(c[0], c[1]);
                            // circle center
                            circle( openCvImage, center, 1, Scalar(0,100,100), 3, LINE_AA);
                            // circle outline
                            int radius = c[2];
                            circle( openCvImage, center, radius, Scalar(57,255,25), 3, LINE_AA);
                        }

                        imshow("detected circles", openCvImage);

                        int keyPressed;
                        keyPressed = cv::waitKey(0);
                        //std::cout << "Value: " << (char) ::recievedCMD << std::endl;
                        if(keyPressed == 'q' || keyPressed == 'Q') { // quit
                            std::cout << "Shutting down camera..." << std::endl;
                            camera.Close();
                            std::cout << "Camera successfully closed.";



                            ////////////////////////////////////////////////////
                            //////////// Here your code ends ///////////////////
                            ////////////////////////////////////////////////////

                            frame++;

                        }
                    }

                }
                else
                {
                    std::cout << "Error: " << ptrGrabResult->GetErrorCode() << " " << ptrGrabResult->GetErrorDescription() << std::endl;
                }
            }

        }
        catch (GenICam::GenericException &e)
        {
            // Error handling.
            std::cerr << "An exception occurred." << std::endl
                      << e.GetDescription() << std::endl;
            exitCode = 1;
        }

        return exitCode;
    }
}
